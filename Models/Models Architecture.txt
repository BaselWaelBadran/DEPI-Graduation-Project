""" BestModel-00.pth """

# CNN Model from scratch
class MelanomaCNN(nn.Module):
    def __init__(self):
        super(MelanomaCNN, self).__init__()

        # Convolutional layers
        self.conv1 = nn.Conv2d(in_channels=3, out_channels=32, kernel_size=5)  # the size after conv1 & pool (32, 148, 148)
        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=5)  # the size after conv2 & pool (64, 72, 72)
        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=5)  # the size after conv3 & pool (128, 34, 34)
        self.conv4 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=5)  # the size after conv4 & pool (256, 15, 15)

        # Pooling layer
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)  # (2, 2)

        # Fully connected layers
        self.fc1 = nn.Linear(256* 15* 15, 128)
        self.fc2 = nn.Linear(128, 32)
        self.fc3 = nn.Linear(32, 2)

        # # Dropout layer for regularization
        # self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = self.pool(nn.ReLU()(self.conv1(x)))
        x = self.pool(nn.ReLU()(self.conv2(x)))
        x = self.pool(nn.ReLU()(self.conv3(x)))
        x = self.pool(nn.ReLU()(self.conv4(x)))

        # Flatten the tensor for the fully connected layers
        x = x.view(-1, 256* 15* 15)  # based on the output of conv#

        # Fully connected layers
        x = nn.ReLU()(self.fc1(x))
        x = nn.ReLU()(self.fc2(x))
        x = self.fc3(x)

        return x

*********************************************************************************************************************************

""" BestModel-01.pth - BestModel-02.pth - BestModel-03.pth """

# CNN Model from scratch
class MelanomaCNN(nn.Module):
    def __init__(self):
        super(MelanomaCNN, self).__init__()

        # Convolutional layers
        self.conv1 = nn.Conv2d(in_channels=3, out_channels=32, kernel_size=5)  # the size after conv1 & pool (32, 148, 148)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=5)  # the size after conv2 & pool (64, 72, 72)
        self.bn2 = nn.BatchNorm2d(64)
        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=5)  # the size after conv3 & pool (128, 34, 34)
        self.bn3 = nn.BatchNorm2d(128)
        self.conv4 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=5)  # the size after conv4 & pool (256, 15, 15)
        self.bn4 = nn.BatchNorm2d(256)

        # Pooling layer
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)  # (2, 2)

        # Fully connected layers
        self.fc1 = nn.Linear(256* 15* 15, 128)
        self.fc2 = nn.Linear(128, 32)
        self.fc3 = nn.Linear(32, 2)

        # Dropout layer for regularization
        self.dropout = nn.Dropout(0.3)

    def forward(self, x):
        x = self.pool(nn.ReLU()(self.bn1(self.conv1(x))))
        x = self.pool(nn.ReLU()(self.bn2(self.conv2(x))))
        x = self.pool(nn.ReLU()(self.bn3(self.conv3(x))))
        x = self.pool(nn.ReLU()(self.bn4(self.conv4(x))))

        # Flatten the tensor for the fully connected layers
        x = x.view(-1, 256* 15* 15)  # based on the output of conv#

        # Fully connected layers
        x = self.dropout(nn.ReLU()(self.fc1(x)))
        x = self.dropout(nn.ReLU()(self.fc2(x)))
        x = self.fc3(x)

        return x